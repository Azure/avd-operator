name: sbx-deployment

env:
  ARM_CLIENT_ID:        ${{ secrets.AVD_AUTOMATION_CLIENT_ID }}
  ARM_CLIENT_SECRET:    ${{ secrets.AVD_AUTOMATION_CLIENT_SECRET }}
  ARM_ENVIRONMENT:      usgovernment
  ARM_SUBSCRIPTION_ID:  ${{ vars.GFIM_SUBSCRIPTION_ID }} #This should be an org variable, not a org secret
  ARM_TENANT_ID:        ${{ vars.GFIM_TENANT_ID }}
  # AZURE_E_AVD_SP_CREDS: ${{ secrets.AZURE_P_CAZ_AVD_IAC_SPN }}

  # Workflow Controls
  RESOURCE_CLEANUP: false

  ASSET_STORAGE_ACCOUNT: '{
    name:              "avdautomationvaassets",
    resourceGroupName: "AVD-AUTOMATION-INFRA",
    subscriptionId:    "${{ vars.GFIM_SUBSCRIPTION_ID }}"
  }'
  AUTH_KEY_VAULT: '{
    name:              "avd-automation",
    resourceGroupName: "jaryber-avd-automation",
    subscriptionId:    "${{ vars.GFIM_SUBSCRIPTION_ID }}"
  }'
  AZURE_TAGS: '{
    deployment_source: "GitHub Actions",
    deployment_tool:   "PowerShell",
    environment:       "SBX",
    owner:             "Temp",
    project:           "Geekly"
  }'
  COMPUTE_SUBSCRIPTION_ID: "${{ vars.GFIM_SUBSCRIPTION_ID }}"
  CREDENTIALS: '{
    "clientId":       "${{ secrets.AVD_AUTOMATION_CLIENT_ID }}",
    "clientSecret":   "${{ secrets.AVD_AUTOMATION_CLIENT_SECRET }}",
    "subscriptionId": "${{ vars.GFIM_SUBSCRIPTION_ID }}",
    "tenantId":       "${{ vars.GFIM_TENANT_ID }}"
  }'
  DEPLOYMENT_LOCATIONS: '[
    {
      diskEncryptionSet: {
        name:              "avd-automation-de",
        resourceGroupName: "AVD-AUTOMATION-INFRA",
        subscriptionId:    "${{ vars.GFIM_SUBSCRIPTION_ID }}"
      },
      fslogixStorageAccountName: "sarmyavdvaiac01fslogix1",
      location: "usdodeast",
      virtualNetworkSubnet: {
        name:               "avd-stuff",
        virtualNetworkName: "avd-automation",
        resourceGroupName:  "jaryber-avd-automation",
        subscriptionId:     "${{ vars.GFIM_SUBSCRIPTION_ID }}"
      }
    },
    {
      diskEncryptionSet: {
        name:              "avd-automation-va",
        resourceGroupName: "AVD-AUTOMATION-INFRA",
        subscriptionId:    "${{ vars.GFIM_SUBSCRIPTION_ID }}"
      },
      fslogixStorageAccountName: "sarmyavdvaiac01fslogix1",
      location: "usgovvirginia",
      virtualNetworkSubnet: {
        name:               "avd-stuff",
        virtualNetworkName: "avd-automation",
        resourceGroupName:  "jaryber-avd-automation",
        subscriptionId:     "${{ vars.GFIM_SUBSCRIPTION_ID }}"
      }
    }
  ]'
  ENTRA_ID_SECURITY_DEVICE_GROUP_NAME: AVD-AUTO-DEVICE-INTERNAL-GENERAL-01-VA-A #Intune related
  GALLERY_IMAGE_DEFINITION: '{
    name:              "base-image",
    version:           "latest",
    galleryName:       "avdautomation",
    resourceGroupName: "jaryber-avd-automation",
    subscriptionId:    "${{ vars.GFIM_SUBSCRIPTION_ID }}"
  }'
  HOST_POOL_SUBSCRIPTION_ID: "${{ vars.GFIM_SUBSCRIPTION_ID }}"
  LOCATION: usgovvirginia
  LOG_ANALYTICS_WORKSPACE: '{
    name:              "avd-automation",
    resourceGroupName: "AVD-AUTOMATION-INFRA",
    subscriptionId:    "${{ vars.GFIM_SUBSCRIPTION_ID }}",
    workspaceId:       "e7157a73-5225-4599-b21a-8adf85a659f6"
  }'
  VIRTUAL_MACHINE_SIZE: Standard_D4as_v5
  SCALING_PLANS: '[
    {
      name:              "P-AVD-AUTO-VA-BAKE",
      resourceGroupName: "AVD-AUTOMATION-INFRA",
      subscriptionId:    "${{ vars.GFIM_SUBSCRIPTION_ID }}"
    },
    {
      name:              "P-AVD-AUTO-VA-COMPLIANT",
      resourceGroupName: "AVD-AUTOMATION-INFRA",
      subscriptionId:    "${{ vars.GFIM_SUBSCRIPTION_ID }}"
    },
    {
      name:              "P-AVD-AUTO-VA-CLEANUP",
      resourceGroupName: "AVD-AUTOMATION-INFRA",
      subscriptionId:    "${{ vars.GFIM_SUBSCRIPTION_ID }}"
    }
  ]'

on:
  pull_request:
    branches: [main]
    paths-ignore:
      - '**/*.md'
      - 'LICENSE'
      - 'github/ISSUE_TEMPLATE/**'

concurrency:
  group:              "${{ github.workflow }}-${{ github.event.pull_request.number }}"
  cancel-in-progress: true

jobs:
  clean-up:
    name:        Cleanup Geekly Resources
    runs-on:     ubuntu-latest
    environment: PROD

    steps:
      - name: Checkout Branch
        if:   ${{ fromJSON(env.RESOURCE_CLEANUP) }}
        uses: actions/checkout@v4.2.2

      - name: Login to Army AVD Subscription
        if:   ${{ fromJSON(env.RESOURCE_CLEANUP) }}
        uses: azure/login@v2.3.0
        with:
          creds:              ${{ env.CREDENTIALS }}
          environment:        "AzureUSGovernment"
          enable-AzPSSession: true

      - name: Cleanup Test Resources
        if:   ${{ fromJSON(env.RESOURCE_CLEANUP) }}
        uses: azure/powershell@v2
        with:
          azPSVersion:         "latest"
          failOnStandardError: true
          inlineScript:        ./workflow-scripts/Remove-DeploymentResourceGroup.ps1 -PullRequestNumber ${{ github.event.pull_request.number }}
        env:
          GITHUB_TOKEN: ${{ github.token }}


  host-pool:
    name:        Deploy Geekly Host Pool
    needs:       [clean-up]
    runs-on:     ubuntu-latest
    environment: PROD

    steps:
      - name: Checkout Branch
        uses: actions/checkout@v4.2.2

      - name:  Get Github Pull Request Number
        id:    pull_request
        shell: pwsh
        run: |
          $PullRequestNumber = ${{ github.event.pull_request.number }}
          Write-Output "Found GitHub pull request number '$PullRequestNumber'"
          Write-Output "NUMBER=$PullRequestNumber" >> $env:GITHUB_OUTPUT

      - name: Login to Army AVD Subscription
        uses: azure/login@v2.3.0
        with:
          creds:              ${{ env.CREDENTIALS }}
          environment:        "AzureUSGovernment"
          enable-AzPSSession: true

      - name: Get or Create Deployment Resource Groups
        id:   resource_group
        uses: azure/powershell@v2
        with:
          azPSVersion:         "latest"
          failOnStandardError: true
          inlineScript: |
            ./workflow-scripts/New-DeploymentResourceGroup.ps1 `
                -PullRequestNumber ${{ steps.pull_request.outputs.NUMBER }} `
                -Location $env:LOCATION `
                -DeveloperUsername ${{ github.actor }}

      - name: Deploy Geekly Host Pool
        uses: azure/powershell@v2
        with:
          azPSVersion:         "latest"
          failOnStandardError: true
          inlineScript: |
            ./bicep/deploy-host-pool/Invoke-Deployment.ps1 `
                -SubscriptionId "${{ env.ARM_SUBSCRIPTION_ID }}" `
                -ResourceGroupName "${{ steps.resource_group.outputs.HOST_POOL_RESOURCE_GROUP_NAME }}"

      - name: Assign Developer Permissions
        uses: azure/powershell@v2
        with:
          azPSVersion:         "latest"
          failOnStandardError: true
          inlineScript: |
            ./workflow-scripts/Invoke-DeveloperPermissionAssignment.ps1 `
                -DeveloperUsername ${{ github.actor }} `
                -PullRequestNumber ${{ steps.pull_request.outputs.NUMBER }}

    outputs:
      HOST_POOL_RESOURCE_GROUP_NAME:    ${{ steps.resource_group.outputs.HOST_POOL_RESOURCE_GROUP_NAME }}
      FUNCTION_APP_RESOURCE_GROUP_NAME: ${{ steps.resource_group.outputs.FUNCTION_APP_RESOURCE_GROUP_NAME }}


  # This job is necessary because the reusable template
  # below to create the function app cannot directly
  # reference env variables from above.
  save-env:
    name:        Save Environment Variables
    runs-on:     ubuntu-latest
    environment: PROD

    steps:
      - name:  Save Environment Variables
        id:    env
        shell: pwsh
        run: |
          $AuthKeyVault = $env:AUTH_KEY_VAULT | ConvertFrom-Json -AsHashtable -Depth 100
          $AzureTags = $env:AZURE_TAGS | ConvertFrom-Json -AsHashtable -Depth 100
          $LogAnalyticsWorkspace = $env:LOG_ANALYTICS_WORKSPACE | ConvertFrom-Json -AsHashtable -Depth 100

          Write-Output "AUTH_KEY_VAULT_NAME=$($AuthKeyVault.name)" >> $env:GITHUB_OUTPUT
          Write-Output "AUTH_KEY_VAULT_RESOURCE_GROUP_NAME=$($AuthKeyVault.resourceGroupName)" >> $env:GITHUB_OUTPUT
          Write-Output "ENVIRONMENT=$($AzureTags.environment)" >> $env:GITHUB_OUTPUT
          Write-Output "LOCATION=$($env:LOCATION)" >> $env:GITHUB_OUTPUT
          Write-Output "LOG_ANALYTICS_WORKSPACE_NAME=$($LogAnalyticsWorkspace.name)" >> $env:GITHUB_OUTPUT
          Write-Output "LOG_ANALYTICS_WORKSPACE_RESOURCE_GROUP=$($LogAnalyticsWorkspace.resourceGroupName)" >> $env:GITHUB_OUTPUT
          Write-Output "LOG_ANALYTICS_WORKSPACE_ID=$($LogAnalyticsWorkspace.workspaceId)" >> $env:GITHUB_OUTPUT

    outputs:
      AUTH_KEY_VAULT_NAME:                    ${{ steps.env.outputs.AUTH_KEY_VAULT_NAME }}
      AUTH_KEY_VAULT_RESOURCE_GROUP_NAME:     ${{ steps.env.outputs.AUTH_KEY_VAULT_RESOURCE_GROUP_NAME }}
      ENVIRONMENT:                            ${{ steps.env.outputs.ENVIRONMENT }}
      LOCATION:                               ${{ steps.env.outputs.LOCATION }}
      LOG_ANALYTICS_WORKSPACE_NAME:           ${{ steps.env.outputs.LOG_ANALYTICS_WORKSPACE_NAME }}
      LOG_ANALYTICS_WORKSPACE_RESOURCE_GROUP: ${{ steps.env.outputs.LOG_ANALYTICS_WORKSPACE_RESOURCE_GROUP }}
      LOG_ANALYTICS_WORKSPACE_ID:             ${{ steps.env.outputs.LOG_ANALYTICS_WORKSPACE_ID }}


  function-app:
    name:  Run Geekly Function App Template
    needs: [host-pool, save-env]
    uses: ./.github/workflows/geekly-template.yml
    with:
      AppConfigurationStoreName:          "${{ needs.host-pool.outputs.HOST_POOL_RESOURCE_GROUP_NAME }}"
      AuthKeyVaultName:                   "${{ needs.save-env.outputs.AUTH_KEY_VAULT_NAME }}"
      AuthKeyVaultResourceGroupName:      "${{ needs.save-env.outputs.AUTH_KEY_VAULT_RESOURCE_GROUP_NAME }}"
      Environment:                        "${{ needs.save-env.outputs.ENVIRONMENT }}"
      FunctionAppName:                    "${{ needs.host-pool.outputs.FUNCTION_APP_RESOURCE_GROUP_NAME }}"
      Location:                           "${{ needs.save-env.outputs.LOCATION }}"
      LogAnalyticsWorkspaceName:          "${{ needs.save-env.outputs.LOG_ANALYTICS_WORKSPACE_NAME }}"
      LogAnalyticsWorkspaceResourceGroup: "${{ needs.save-env.outputs.LOG_ANALYTICS_WORKSPACE_RESOURCE_GROUP }}"
      LogAnalyticsWorkspaceId:            "${{ needs.save-env.outputs.LOG_ANALYTICS_WORKSPACE_ID }}"
      ResourceGroupName:                  "${{ needs.host-pool.outputs.FUNCTION_APP_RESOURCE_GROUP_NAME }}"
    secrets:
      ARM_CLIENT_ID:        ${{ secrets.AVD_AUTOMATION_CLIENT_ID }}
      ARM_CLIENT_SECRET:    ${{ secrets.AVD_AUTOMATION_CLIENT_SECRET }}
      ARM_ENVIRONMENT:      usgovernment
      ARM_SUBSCRIPTION_ID:  ${{ vars.GFIM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID:        ${{ vars.GFIM_TENANT_ID }}
      # AZURE_E_AVD_SP_CREDS: ${{ secrets.AZURE_P_CAZ_AVD_IAC_SPN }}
